###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          14/Dec/2022  16:02:05
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for MSP430 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01\source\SOL\main_sol1.c
#    Command line  =  
#        -f C:\Temp\EW273E.tmp
#        (D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01\source\SOL\main_sol1.c
#        -D DEBUG -D ELMOS_LIN -lCN
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01\Debug\List
#        -o
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430GENERIC__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430fn.h" -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/includes/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/irq/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/LINDrv/includes/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/LINDrv/includes/interfaces/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/LINDrv/devices/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/LINDrv/devices/Bus/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/ROMInterface/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/HAL/modules/eeprom_access/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/LIN/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/DRV/
#        -I
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01/source/APP/
#        -On)
#    Locale        =  Korean_KOR.949
#    List file     =  
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01\Debug\List\main_sol1.lst
#    Object file   =  
#        D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01\Debug\Obj\main_sol1.r43
#
###############################################################################

D:\KOREA_MOOD_LAMP_TRAINING_Feb17_18_2023\E52139B_Quiz_PWM_KOR_Training_v01\source\SOL\main_sol1.c
      1          
      2          #include <el_helper.h>

   \                                 In  segment DATA16_AN, at 0x182
   \   union <unnamed> volatile _A_SYS_STATE_CONTROL
   \                     _A_SYS_STATE_CONTROL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x340
   \   union <unnamed> volatile _A_PWM_CONTROL
   \                     _A_PWM_CONTROL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x348
   \   unsigned short volatile PWM_PRESCALER[4]
   \                     PWM_PRESCALER:
   \   000000                DS8 8
      3          #include "CommonInterruptHandler.h"
      4          #include "rom_API.h"
      5          
      6          
      7          #include "HalSys.h"
      8          #include "HalTimer.h"
      9          
     10          
     11          #define eint() asm("eint \n\
     12                              nop")                    
     13          #define dint() asm("dint \n\
     14                              nop")
     15          
     16                                
     17          __no_init struct  {
     18              volatile unsigned short PERIOD;
     19              volatile unsigned short START;
     20              volatile unsigned short STOP;
     21              volatile unsigned short COUNTER;

   \                                 In  segment DATA16_AN, at 0x350
     22          } PWM_CH[4] @0x350u;
   \                     PWM_CH:
   \   000000                DS8 32
     23          
     24          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          vic_cpInterfaceFunctions_t vic_IfFuns; /* VIC Interface pointer */
   \                     vic_IfFuns:
   \   000000                DS8 2
     26          
     27          

   \                                 In  segment CODE, align 2
     28          void main(void)
   \                     main:
     29          { 
     30              dint();
   \   000000   32C2         dint 
   \   000002   0343                     nop
     31          /*******************************************************************************
     32              Init Clocks
     33          *******************************************************************************/
     34              SYS_STATE_CONTROL_bit.pwm_clk_sel = 1u;
   \   000004   A2D28201     BIS.W   #0x4, &0x182
     35              SYS_STATE_CONTROL_bit.sys_clk_sel = 1u;
   \   000008   1F428201     MOV.W   &0x182, R15
   \   00000C   3FF0FCFF     AND.W   #0xfffc, R15
   \   000010   1FD3         BIS.W   #0x1, R15
   \   000012   824F8201     MOV.W   R15, &0x182
     36          
     37          /*******************************************************************************
     38              Init Vector Interrupt Controller
     39          *******************************************************************************/ 
     40              if(romIf_MainInterface->Interface_Get(ROMIF_API_VIC, (romIf_cpGenericInterface_t *) &vic_IfFuns, NULL) != TRUE)
   \   000016   0E43         MOV.W   #0x0, R14
   \   000018   3D40....     MOV.W   #vic_IfFuns, R13
   \   00001C   1C43         MOV.W   #0x1, R12
   \   00001E   1F42....     MOV.W   &romIf_MainInterface, R15
   \   000022   9F120200     CALL    0x2(R15)
   \   000026   5C93         CMP.B   #0x1, R12
   \   000028   0124         JEQ     ??main_2
     41              {
     42                  while(1);
   \                     ??main_0:
   \   00002A   FF3F         JMP     ??main_0
     43              }
     44              InterruptHandlerInitialize(vic_IfFuns);
   \                     ??main_2:
   \   00002C   1C42....     MOV.W   &vic_IfFuns, R12
   \   000030   B012....     CALL    #InterruptHandlerInitialize
     45              
     46              HalTimerInit();
   \   000034   B012....     CALL    #HalTimerInit
     47              eint();
   \   000038   32D2         eint 
   \   00003A   0343                     nop
     48          
     49              for(;;)
     50              {
     51          /*******************************************************************************
     52              Your Algorithm
     53              2. PWM_PRESCALER[0] = 
     54                    (INPUT_FREQUENCY_PWM_MODULE/PWM_PERIOD_TICK(STEP)/PWM_FREQUENCY)-1U;
     55          *******************************************************************************/
     56          
     57          //BLUE
     58                  PWM_PRESCALER[0] = (48000000UL/20000UL/100UL)-1U; /* 2 */
   \                     ??main_1:
   \   00003C   B24017004803 MOV.W   #0x17, &0x348
     59                  PWM_CH[0].PERIOD = 20000UL;
   \   000042   B240204E5003 MOV.W   #0x4e20, &0x350
     60                  PWM_CH[0].START = 0U;
   \   000048   82435203     MOV.W   #0x0, &0x352
     61                  PWM_CH[0].STOP = 1000U;
   \   00004C   B240E8035403 MOV.W   #0x3e8, &0x354
     62          //RED
     63                  PWM_PRESCALER[1] = (48000000UL/20000UL/100UL)-1U;
   \   000052   B24017004A03 MOV.W   #0x17, &0x34a
     64                  PWM_CH[1].PERIOD = 20000UL;
   \   000058   B240204E5803 MOV.W   #0x4e20, &0x358
     65                  PWM_CH[1].START = 0U;
   \   00005E   82435A03     MOV.W   #0x0, &0x35a
     66                  PWM_CH[1].STOP = 0U;
   \   000062   82435C03     MOV.W   #0x0, &0x35c
     67          //GREEN
     68                  PWM_PRESCALER[2] = (48000000UL/20000UL/100UL)-1U;
   \   000066   B24017004C03 MOV.W   #0x17, &0x34c
     69                  PWM_CH[2].PERIOD = 20000UL;
   \   00006C   B240204E6003 MOV.W   #0x4e20, &0x360
     70                  PWM_CH[2].START = 0U;
   \   000072   82436203     MOV.W   #0x0, &0x362
     71                  PWM_CH[2].STOP = 0U;
   \   000076   82436403     MOV.W   #0x0, &0x364
     72          
     73                  PWM_CONTROL |=  E_PWM_CONTROL_DRIVER_0_ENABLE | E_PWM_CONTROL_PWM_0_ENABLE |
     74                                  E_PWM_CONTROL_DRIVER_1_ENABLE | E_PWM_CONTROL_PWM_1_ENABLE |
     75                                  E_PWM_CONTROL_DRIVER_2_ENABLE | E_PWM_CONTROL_PWM_2_ENABLE ;
   \   00007A   B2D077004003 BIS.W   #0x77, &0x340
     76             
     77          /******************************************************************************/        
     78                  if(HalTimerGetFlagTask() != 0u)
   \   000080   B012....     CALL    #HalTimerGetFlagTask
   \   000084   0C93         CMP.W   #0x0, R12
   \   000086   DA27         JEQ     ??main_1
     79                  {   
     80                      asm(" NOP");
   \   000088   0343         NOP
   \   00008A   D83F         JMP     ??main_1
   \   00008C                REQUIRE _A_SYS_STATE_CONTROL
   \   00008C                REQUIRE PWM_PRESCALER
   \   00008C                REQUIRE PWM_CH
   \   00008C                REQUIRE _A_PWM_CONTROL
     81                  }
     82              }
     83          }
     84          
     85          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   main
        2   -- Indirect call
        2   -> HalTimerGetFlagTask
        2   -> HalTimerInit
        2   -> InterruptHandlerInitialize


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      32  PWM_CH
       8  PWM_PRESCALER
       2  _A_PWM_CONTROL
       2  _A_SYS_STATE_CONTROL
     140  main
       2  vic_IfFuns

 
 140 bytes in segment CODE
  44 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
 
 140 bytes of CODE memory
   2 bytes of DATA memory (+ 44 bytes shared)

Errors: none
Warnings: none
